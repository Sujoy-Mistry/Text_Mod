{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","role","onClick","toggleMode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","header","rows","col","backgroundColor","value","onChange","event","console","log","target","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","class","defaultProps","App","setMode","_useState3","_useState4","setAlert","about","body","background","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.d714c7d9.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { a } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    {/* <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-a\" to=\"/About\">{props.about}</a>\r\n                        </li>\r\n\r\n                    </ul> */}\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Dark mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n//p should be lowercase\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'Set title Here'\r\n}","import React,{useState} from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const [text,setText]=useState('');\r\n    const handleUpClick=()=>{\r\n        console.log(\"Button clicked\")\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLoClick=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n   \r\n    const handleOnChange=(event)=>{\r\n       console.log(\"Uppercase\");\r\n       setText(event.target.value);\r\n   }\r\n   const handleClear=()=>{\r\n       let newText=\"\";\r\n       setText(newText);\r\n   }\r\n   const handleCopy=()=>{\r\n     var text=document.getElementById(\"myBox\");\r\n     text.select();\r\n     navigator.clipboard.writeText(text.value);  \r\n   }\r\n   \r\n    return (\r\n        <>\r\n        <div className=\"container-md\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h2 className=\"mt-3\" >{props.header}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" col=\"3\" style={{backgroundColor:props.mode==='dark'?'grey':'white'}} value={text} onChange={handleOnChange}></textarea>\r\n                </div>\r\n                <button className=\"btn  btn-primary mr-2 \" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary m-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary m-2\" onClick={handleClear}>Clear Text</button>\r\n                <button className=\"btn btn-primary m-2\" onClick={handleCopy}>Copy Text</button>\r\n                <h4>Your text summary</h4>\r\n                <p>{text.split(\" \").length} Words {text.length} Characters</p>\r\n                <h4>Preview</h4>\r\n                <p>{text.length===0?'Enter Something':text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && <div class=\"alert alert-success\" role=\"alert\">\r\n  {props.alert}\r\n</div>\r\n  )\r\n}\r\n","import './App.css';\nimport React   from 'react';\nimport Navbar from './components/Navbar'\nimport Textform from './components/Textform'\n// import About from './components/About'\nimport { useState } from 'react';\nimport Alert from './components/Alert';\n//import { Router, Routes } from 'react-router';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n const [alert, setAlert] = useState(null)\n  // const showMsg=()=>{\n  //   setMsg(\"Dark Mode is Enabled\",\"Succses\");\n  // }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.background='#042743';\n     // showMsg();\n     setAlert(\"Dark mode is Enabled\");\n     setTimeout(()=>{\n       setAlert(null);\n     },1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.background='white';\n      setAlert(\"Light mode is Enabled\");\n      setTimeout(()=>{\n       setAlert(null);\n     },1500);\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n     <Navbar title=\"TextConverter\" about=\"About App\" mode={mode} toggleMode={toggleMode}></Navbar>\n    <Alert alert={alert}/>\n    <Textform header=\"Enter the text to analyze below\" mode={mode}/>\n    {/* <Routes>\n          <Route path=\"/About\" element={<About/>}>\n          </Route> \n           <Route path=\"/\" element={<Textform header=\"Enter the text to analyze below\" mode={mode}/>}>\n          </Route>\n        </Routes>\n    </Router> */}\n    </> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}